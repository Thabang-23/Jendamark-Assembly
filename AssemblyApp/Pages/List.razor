@page "/operations"
@using AssemblyApp.Models
@inject AssemblyApp.Data.DeviceService DeviceService
@inject AssemblyApp.Data.OperationService OperationService

<PageTitle>Assembly | Home</PageTitle>

<button class="btn btn-primary" @onclick="() => Modal.Open()">Create</button>

<Create @ref="Modal" Devices="@Devices" />

@if (Operations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Order In Which To Operate</th>
                <th>Device</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var operation in Operations)
            {
                <tr>
                    <td>@operation.ImageData</td>
                    <td>@operation.Name</td>
                    <td>@operation.OrderInWhichToPerform</td>
                    <td>@operation.Device.Name</td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(() => RemoveAsync(operation.OperationID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Create Modal { get; set; }
    private List<Operation> Operations = new List<Operation>();
    private IEnumerable<Device>? Devices;
    protected override async Task OnInitializedAsync()
    {
        var operationsViewModel = await OperationService.GetOperations();
        var devices = DeviceService.GetDevices();

        foreach(var Operation in operationsViewModel)
        {
            Devices = devices;
            var device = devices.FirstOrDefault(x => x.DeviceID == Operation.DeviceID);
            Operation.Device = device;

            Operations.Add(Operation);
        }
    }

    public void RemoveAsync(int id)
    {
        OperationService.RemoveItem(id);
    }
}