@inject AssemblyApp.Data.OperationService OperationService

@using Models
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <EditForm Model="_item" OnValidSubmit="@CreateClick">
                    <DataAnnotationsValidator />
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Create</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (_item == null)
                        {
                            <Spinner></Spinner>
                        }
                        else
                        {
                            <div class="container">
                                <div class="row">

                                    <div class="form-group">
                                        <label class="control-label col-md-6">Name</label>
                                        <div class="col-md-12">
                                            <InputText class="form-control" @bind-Value="_item.Name" />
                                            <ValidationMessage For="(() => _item.Name)" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="control-label col-md-6">Order In Which to Perform</label>
                                        <div class="col-md-12">
                                            <InputNumber class="form-control" @bind-Value="_item.OrderInWhichToPerform" />
                                            <ValidationMessage For="(() => _item.OrderInWhichToPerform)" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label col-md-6">Device</label>
                                        <div class="col-md-12">
                                            <InputSelect @bind-Value="_item.DeviceID" placeholder="Select Device"
                                            class="form-control">
                                                @if (Devices != null)
                                                {
                                                     @foreach (var device in Devices)
                                                    {
                                                        <option value="@device.DeviceID">@device.Name</option>
                                                    }
                                                }
                                            </InputSelect>
                                        <ValidationMessage For="(() => _item.Device)" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal"
                            @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            Create
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    private Operation _item = new Operation();

    [Parameter]
    public IEnumerable<Device> Devices { get; set; }

    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }

    private async Task CreateClick()
    {
            await OperationService.Create(_item);
            await OnSaveClick.InvokeAsync(null);
            Close();
    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}